use JSON::Fast;

my $base := $?FILE.IO.parent.parent;

unit sub MAIN(
  IO()   :$module   = $base.add('lib').add('HTML').add('Entity').add('Fast.rakumod'),
  IO()   :$entities = $base.add('build').add('entities.json'),
  Bool:D :$debug    = False,
);

my %blacklist is Set = <&zwnj; &DownBreve; &TripleDot; &DotDot; &tdot; &zwj;>;
my %usequotes is Set = <&quot; &QUOT; &apos;>;
my %useescape is Set = ('&bsol;',);

my $generator = $*PROGRAM-NAME;
my $generated = DateTime.now.gist.subst(/\.\d+/,'');
my $start     = '#- start of generated part of entities';
my $end       = '#- end of generated part of entities';

my %rules := from-json $entities.slurp;

my str @out;

# Set up entity information in reverse order, so that the UPPERcase
# versions will be overwritten by the lowercase ones.
for %rules.keys.sort.reverse -> str $key {
    # Skip blacklisted, or non-XML-compatible keys.
    next if %blacklist{$key} || !$key.match(/^'&' \w+ ';'$/);

    @out.push: "'$key', ";
    @out.push: %rules{$key}<codepoints>.chrs.raku ~ ',';
}

my $old := $module.slurp;
my str @lines = $old.lines;
$*OUT = $module.open(:w);

# for all the lines in the source that don't need special handling
while @lines {
    my $line := @lines.shift;

    # nothing to do yet
    unless $line.starts-with($start) {
        say $line;
        next;
    }

    # found header
    say $start ~ " " ~ "-" x 79 - $start.chars;
    say "#- Generated on $generated by $generator";
    say "#- PLEASE DON'T CHANGE ANYTHING BELOW THIS LINE";

    # skip the old version of the code
    while @lines {
        last if @lines.shift.starts-with($end);
    }

    my str $out = 'my constant %decode = ';
    while @out {
        my str $next = @out.shift;
        if $out.chars + $next.chars > 75 {
            say $out.trim-trailing;
            $out = "  $next";
        }
        else {
            $out ~= $next;
        }
    }
    say $out.chars > 2
      ?? "$out.chop();"
      !! ';';

    # we're done
    say "#- PLEASE DON'T CHANGE ANYTHING ABOVE THIS LINE";
    say $end ~ " " ~ "-" x 79 - $end.chars;
}

# Close the file properly
$*OUT.close;

# Restore if something went wrong
my $all-ok = True;
END {
    unless $all-ok {
        .spurt($old) with $module;
    }
}

# vim: expandtab shiftwidth=4
